[[plugins]]
repo = 'Shougo/dein.vim'

#かっこよく
[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

#見やすく
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

#テーマ
#addじゃないと動かない
[[plugins]]
repo = 'rakr/vim-one'
hook_add = '''
filetype plugin indent on

syntax enable
colorscheme one

" tmux
set t_8b=[48;2;%lu;%lu;%lum
set t_8f=[38;2;%lu;%lu;%lum

let g:airline_theme = 'one'
" powerline enable(最初に設定しないとダメ)
let g:airline_powerline_fonts = 1
" タブバーをかっこよく
let g:airline#extensions#tabline#enabled = 1
" 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
" gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
let g:airline#extensions#hunks#enabled = 0
'''

##アイコン for テーマ
#[[plugins]]
#repo = 'ryanoasis/vim-devicons'
#
# インデント表示
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
autocmd BufNewFile,BufRead,BufEnter * :let g:indentLine_setConceal = (&ft=='json' ? 0 : 1)
'''

# 括弧に別々の色を付ける
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

# rgb
[[plugins]]
repo = 'lilydjwg/colorizer'

#:Gdiffと打つとHEADと現在の状態を比較できる
#:Glog = git log
#:Gdiff コミット番号でそのdiffをとれる
#:Gread HEAD^^:%
#:Gblameでコミット詳細みれる
#:Gstatus = git status
#:Gwrite [path]
#:Gcommit
#:Gdiff [fugitive-revision]
#:Gedit [fugitive-revision]
#:Gmove [destination]
#:Gremove
#:Glog [args]
#:Gpush [args]
#:Gfetch [args]
#:Gmerge [args]
#:Gpull [args]
[[plugins]]
repo = 'tpope/vim-fugitive'
# github/gitlab token必要なので考える
#[[plugins]]
#repo = 'tpope/vim-rhubarb'
[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'

# bufferlist(lazyではできない)
[[plugins]]
#repo = '~/MyDevelopment/vim-bufferlist'
repo = 'enoatu/vim-bufferlist'
hook_add = '''
let g:BufferListMaxWidth = 100
map <C-k> :call BufferList()<CR>
'''

#gitで管理してる場合、左側に差分を表示
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
"画面をガタガタ言わせない
set signcolumn=yes

"タイピング終了後すぐに反映する
set updatetime=200

"master
let s:switchGutter=1
noremap m :call SwitchGutter()<CR>
function! SwitchGutter()
    if (s:switchGutter == 1)
        let g:gitgutter_diff_base = 'origin/main'
        let s:switchGutter=2
        echo "switchGutter: origin/main"
    elseif (s:switchGutter == 2)
        let g:gitgutter_diff_base = 'origin/dev'
        let s:switchGutter=3
        echo "switchGutter: origin/dev"
    elseif (s:switchGutter == 3)
        echo "switchGutter: デフォルト"
        let s:switchGutter=4
        let g:gitgutter_diff_base = ''
    elseif (s:switchGutter == 4)
        echo "switchGutter: origin/master"
        let s:switchGutter=5
        let g:gitgutter_diff_base = 'origin/master'
    elseif (s:switchGutter == 5)
        echo "switchGutter: origin/staging"
        let s:switchGutter=1
        let g:gitgutter_diff_base = 'origin/staging'
    endif
    :GitGutterAll
endfunction
'''

###################################lazy#############################

# easy align
[[plugins]]
repo = 'junegunn/vim-easy-align'
lazy = true
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

# インデントの位置を直す
[[plugins]]
repo = "pangloss/vim-javascript"
lazy = true

# fで検索後移動できるようにする
[[plugins]]
repo = 'rhysd/clever-f.vim'
lazy = true

# 定義ジャンプ
[[plugins]]
repo = 'pechorin/any-jump.vim'
lazy = true
hook_add = '''
let g:any_jump_window_width_ratio  = 0.9
let g:any_jump_window_height_ratio = 0.9
let g:any_jump_max_search_results = 20
" Normal mode: Jump to definition under cursor
nnoremap <C-j> :AnyJump<CR>

" Visual mode: jump to selected text in visual mode
xnoremap <C-j> :AnyJumpVisual<CR>

" Normal mode: open previous opened file (after jump)
nnoremap <C-b> :AnyJumpBack<CR>

" Normal mode: open last closed search window again
"nnoremap <C-al> :AnyJumpLastResults<CR>
'''




#[[plugins]]
#repo = 'juliosueiras/vim-terraform-completion'
#
#[[plugins]]
#repo = 'MaxMEllon/vim-jsx-pretty'
#
#[[plugins]]
#repo = 'styled-components/vim-styled-components'
#
#[[plugins]]
#repo = 'rust-lang/rust.vim'
#
# copilot for nvim
# lazyで動かない
# 動かなくなったら copilot log で確認する(大体 入れなおせば直る)
[[plugins]]
repo = 'github/copilot.vim'
hook_source = '''
" 確定キーをTABからC-lに変更
imap <silent><script><expr> <C-l> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
echo "ready copilot"
'''

[[plugins]]
repo = 'kylechui/nvim-surround'
lua_add = '''
require("nvim-surround").setup({
   keymaps = {
       insert = "<C-g>s",
       insert_line = "<C-g>S",
       normal = "e",
       normal_cur = "es",
       normal_line = "yS",
       normal_cur_line = "ySS",
       visual = "S",
       visual_line = "gS",
       delete = "ds",
       change = "cs",
   }
})
'''

# coc
# 動かなくなったら↓コメントアウトして立ち上げ、コメントインして立ち上げれば直る
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
" インストール時実行
" call coc#util#install()
" pip install pynvim

" Give more space for displaying messages. 必要かもしれない
set cmdheight=2

" タイピング終了後すぐに反映する
set updatetime=200

" 補完系メッセージを表示しない
set shortmess+=c

"画面をガタガタ言わせない
set signcolumn=yes

" 補完表示時のEnterで改行をしない
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" 定義ジャンプ
nmap <silent> gd <Plug>(coc-definition)
" 型定義ジャンプ
nmap <silent> gt <Plug>(coc-type-definition)
" grep
nmap <silent> gr <Plug>(coc-references)

" 情報表示
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>

" リネーム
nmap cn <Plug>(coc-rename)

" コードアクション(全て)
nmap cc  <Plug>(coc-codeaction)

" コードアクション(特定操作)
xmap cd  <Plug>(coc-codeaction-selected)
nmap cd  <Plug>(coc-codeaction-selected)

" Apply AutoFix to problem on the current line.
nmap cq  <Plug>(coc-fix-current)

" Format selected code.
xmap cf  <Plug>(coc-format-selected)
nmap cf  <Plug>(coc-format-selected)

":Format all
command! -nargs=0 Format :call CocAction('format')

":ORで organize imports (インポートを不要削除したり、並び替えたりする)
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Show all diagnostics.
nnoremap <silent><nowait> dg  :<C-u>CocList diagnostics<cr>

" Use `[d` and `]d` to navigate diagnostics
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

let g:coc_global_extensions = ['coc-tsserver', '@yaegassy/coc-volar', 'coc-go', 'coc-phpls', 'coc-rust-analyzer', 'coc-diagnostic', 'coc-snippets', 'coc-tabnine', '@yaegassy/coc-tailwindcss3', 'coc-webview', 'coc-markdown-preview-enhanced']

"""""""""coc-snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

echo "ready coc"
'''
# terraform-lsp required
## download lsp and pathing
# coc-solargraph
## sudo gem install solargraph
# coc-perl
