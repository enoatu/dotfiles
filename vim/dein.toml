[[plugins]]
repo = 'Shougo/dein.vim'

#かっこよく
[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

#見やすく
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

#テーマ
[[plugins]]
repo = 'rakr/vim-one'

#アイコン for テーマ
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# インデント
[[plugins]]
repo = 'Yggdroot/indentLine'

#プラグインによってjsonの表示がおかしくなるものがあるため入れる
[[plugins]]
repo = 'elzr/vim-json'

# markdown
[[plugins]]
repo = 'plasticboy/vim-markdown'

# bufferlist(lazyではできない)
[[plugins]]
repo = 'vim-scripts/bufferlist.vim'

#gitで管理してる場合、左側に差分を表示
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'
if = 'has("nvim")'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
if = 'has("nvim")'

[[plugins]]
repo = 'leafgarland/typescript-vim'
if = 'has("nvim")'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
if = 'has("nvim") && executable("node") && executable("yarn")'
on_i = 1
merged = '0'
hook_source = '''
let g:coc_global_extensions = [ 'coc-tsserver', 'coc-vetur', 'coc-go', 'coc-rust-analyzer' ]
" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
'''
#hook_source = '''
#call coil398#init#coc#hook_source()
#'''
#build = './install.sh nightly'
#let g:coc_global_extensions = [ 'coc-tsserver' ]

[[plugins]]
repo = 'rust-lang/rust.vim'
if = 'has("nvim")'
