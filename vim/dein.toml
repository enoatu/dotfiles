[[plugins]]
repo = 'Shougo/dein.vim'

#かっこよく
[[plugins]]
repo    = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

#見やすく
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

#テーマ
#addじゃないと動かない
[[plugins]]
repo = 'rakr/vim-one'
hook_add = '''
filetype plugin indent on

syntax enable
colorscheme one

" tmux
set t_8b=[48;2;%lu;%lu;%lum
set t_8f=[38;2;%lu;%lu;%lum

let g:airline_theme = 'one'
" powerline enable(最初に設定しないとダメ)
let g:airline_powerline_fonts = 1
" タブバーをかっこよく
let g:airline#extensions#tabline#enabled = 1
" 選択行列の表示をカスタム(デフォルトだと長くて横幅を圧迫するので最小限に)
let g:airline_section_z = airline#section#create(['windowswap', '%3p%% ', 'linenr', ':%3v'])
" gitのHEADから変更した行の+-を非表示(vim-gitgutterの拡張)
let g:airline#extensions#hunks#enabled = 0
'''

##アイコン for テーマ
#[[plugins]]
#repo = 'ryanoasis/vim-devicons'
#
# インデント表示
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
autocmd BufNewFile,BufRead,BufEnter * :let g:indentLine_setConceal = (&ft=='json' ? 0 : 1)
'''

# 括弧に別々の色を付ける
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

##indentLineプラグインによってjsonファイルの表示がおかしくなるため入れる
#[[plugins]]
#repo = 'elzr/vim-json'
#hook_add = '''
#let g:vim_json_syntax_conceal = 0
#'''


# rgb
[[plugins]]
repo = 'lilydjwg/colorizer'

#:Gdiffと打つとHEADと現在の状態を比較できる
#:Glog = git log
#:Gdiff コミット番号でそのdiffをとれる
#:Gread HEAD^^:%
#:Gblameでコミット詳細みれる
#:Gstatus = git status
#:Gwrite [path]
#:Gcommit
#:Gdiff [fugitive-revision]
#:Gedit [fugitive-revision]
#:Gmove [destination]
#:Gremove
#:Glog [args]
#:Gpush [args]
#:Gfetch [args]
#:Gmerge [args]
#:Gpull [args]
[[plugins]]
repo = 'tpope/vim-fugitive'
# github/gitlab token必要なので考える
#[[plugins]]
#repo = 'tpope/vim-rhubarb'
[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'

# bufferlist(lazyではできない)
[[plugins]]
repo = '~/MyDevelopment/vim-bufferlist'
#repo = 'enoatu/vim-bufferlist'
hook_add = '''
let g:BufferListMaxWidth = 100
map <C-k> :call BufferList()<CR>
'''

#gitで管理してる場合、左側に差分を表示
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
"画面をガタガタ言わせない
set signcolumn=yes

"タイピング終了後すぐに反映する
set updatetime=200

"master
let s:switchGutter=1
noremap mm :call SwitchGutter()<CR>
function! SwitchGutter()
    if (s:switchGutter == 1)
        let g:gitgutter_diff_base = 'origin/main'
        let s:switchGutter=2
        echo "switchGutter: origin/main"
    elseif (s:switchGutter == 2)
        let g:gitgutter_diff_base = 'origin/dev'
        let s:switchGutter=3
        echo "switchGutter: origin/dev"
    elseif (s:switchGutter == 3)
        echo "switchGutter: デフォルト"
        let s:switchGutter=4
        let g:gitgutter_diff_base = ''
    elseif (s:switchGutter == 4)
        echo "switchGutter: origin/master"
        let s:switchGutter=1
        let g:gitgutter_diff_base = 'origin/master'
    endif
    :GitGutterAll
endfunction
'''

###################################lazy#############################

# easy align
[[plugins]]
repo = 'junegunn/vim-easy-align'
lazy = true
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

# インデントの位置を直す
[[plugins]]
repo = "pangloss/vim-javascript"
lazy = true

# fで検索後移動できるようにする
[[plugins]]
repo = 'rhysd/clever-f.vim'
lazy = true

# 定義ジャンプ
[[plugins]]
repo = 'pechorin/any-jump.vim'
lazy = true
hook_add = '''
let g:any_jump_window_width_ratio  = 0.9
let g:any_jump_window_height_ratio = 0.9
let g:any_jump_max_search_results = 20
" Normal mode: Jump to definition under cursor
nnoremap <C-j> :AnyJump<CR>

" Visual mode: jump to selected text in visual mode
xnoremap <C-j> :AnyJumpVisual<CR>

" Normal mode: open previous opened file (after jump)
nnoremap <C-b> :AnyJumpBack<CR>

" Normal mode: open last closed search window again
"nnoremap <C-al> :AnyJumpLastResults<CR>
'''
