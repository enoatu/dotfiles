#[[plugins]]
#repo = 'juliosueiras/vim-terraform-completion'
#
#[[plugins]]
#repo = 'MaxMEllon/vim-jsx-pretty'
#
#[[plugins]]
#repo = 'styled-components/vim-styled-components'
#
#[[plugins]]
#repo = 'rust-lang/rust.vim'
#
# copilot for nvim
# lazyで動かない
# 動かなくなったら copilot log で確認する(大体 入れなおせば直る)
[[plugins]]
repo = 'github/copilot.vim'
hook_source = '''
" 確定キーをTABからC-lに変更
imap <silent><script><expr> <C-l> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
echo "ready copilot"
'''

# coc
# 動かなくなったら↓コメントアウトして立ち上げ、コメントインして立ち上げれば直る
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
" インストール時実行
" call coc#util#install()
" pip install pynvim

" Give more space for displaying messages. 必要かもしれない
set cmdheight=2

" タイピング終了後すぐに反映する
set updatetime=200

" 補完系メッセージを表示しない
set shortmess+=c

"画面をガタガタ言わせない
set signcolumn=yes

" 補完表示時のEnterで改行をしない
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" 定義ジャンプ
nmap <silent> gd <Plug>(coc-definition)
" 型定義ジャンプ
nmap <silent> gt <Plug>(coc-type-definition)
" grep
nmap <silent> gr <Plug>(coc-references)

" 情報表示
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>

" リネーム
nmap cn <Plug>(coc-rename)

" コードアクション(全て)
nmap cc  <Plug>(coc-codeaction)

" コードアクション(特定操作)
xmap cd  <Plug>(coc-codeaction-selected)
nmap cd  <Plug>(coc-codeaction-selected)

" Apply AutoFix to problem on the current line.
nmap cq  <Plug>(coc-fix-current)

" Format selected code.
xmap cf  <Plug>(coc-format-selected)
nmap cf  <Plug>(coc-format-selected)

":Format all
command! -nargs=0 Format :call CocAction('format')

":ORで organize imports (インポートを不要削除したり、並び替えたりする)
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Show all diagnostics.
nnoremap <silent><nowait> dg  :<C-u>CocList diagnostics<cr>

" Use `[d` and `]d` to navigate diagnostics
nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)

let g:coc_global_extensions = ['coc-tsserver', '@yaegassy/coc-volar', 'coc-go', 'coc-phpls', 'coc-rust-analyzer', 'coc-spell-checker', 'coc-snippets', 'coc-tabnine', '@yaegassy/coc-tailwindcss3']

"""""""""coc-snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

echo "ready coc"
'''
# terraform-lsp required
## download lsp and pathing
# coc-solargraph
## sudo gem install solargraph
# coc-perl
