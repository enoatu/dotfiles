autoload -U compinit
compinit

# beep音消す
setopt no_beep

setopt COMPLETE_IN_WORD

setopt IGNOREEOF

# 日本語を使用
export LANG=ja_JP.UTF-8

# パスを追加したい場合
export PATH="$HOME/bin:$PATH"

# 色を使用
autoload -Uz colors
colors

# 補完
autoload -Uz compinit
compinit

# emacsキーバインド
bindkey -e

# 他のターミナルとヒストリーを共有
setopt share_history
setopt extended_history

HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000

# 自動でpushdを実行
setopt auto_pushd

# pushdから重複を削除
setopt pushd_ignore_dups

# コマンドミスを修正
setopt correct

# エイリアス
alias sudo='sudo ' # sudo ll など、sudo してもaliasを引き継げる
alias vi='vim'
alias lst='ls -ltr'
alias l='ls -ltr'
alias la='ls -la'
alias ll='ls -l'
alias so='source'
alias gba='git branch --sort=-authordate'
alias gf="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

#alias c='cdr'
# historyに日付を表示
alias h='fc -lt '%F %T' 1'
alias cp='cp -i'
alias rm='rm -i'
alias mkdir='mkdir -p'
#alias ..='c ../'
alias p='pushd'
alias diff='diff -U1'
alias exsh='exec $SHELL -l'
alias s='git status'
alias a='git add . && git status'
alias r='git reset && git status'
alias c='git commit -m'
alias am='git commit --amend'
alias gb='git branch'
alias gd='git diff'
alias gds='git diff --staged'
alias gco='git checkout'
alias gl='git log'
alias gprom='git stash && git pull --rebase origin master && git stash pop'
alias cmw='~/dotfiles/bin/gitcommit.sh wrench'
alias cmp='~/dotfiles/bin/gitcommit.sh heavy_plus_sign'
alias cmm='~/dotfiles/bin/gitcommit.sh heavy_minus_sign'
alias cmr='~/dotfiles/bin/gitcommit.sh recycle'
alias cms='~/dotfiles/bin/gitcommit.sh space_invader'
alias cmb='~/dotfiles/bin/gitcommit.sh bug'
alias cmo='~/dotfiles/bin/gitcommit.sh construction'

alias d='docker'
alias dc='/usr/local/bin/docker compose'

alias t='terraform'
alias vim='nvim'
# tmux でvimの色おかしい時はこちらを使う
alias xtmux='TERM=xterm-256color tmux'
alias ta='tmux attach'

gitstashpopreset() {
  git checkout --ours . && git reset && git checkout .
}

alias v='(){vim $(gitdiffls $1)}'

gs() {
  #git diff master HEAD --name-only
  git status
}

dr() {
  local dirs=$HOME/dotfiles/.dirs
  arg=$1
  if [ -z "$arg" ]; then
    return
  elif [ "$arg" = '-l' ]; then
    cat $dirs
  else
    target_dir=$(tac $dirs | awk -F"\t" -v arg=$arg '$1 == arg {print $2}' | head -n1)
    [ -z $target_dir ] && return 1
    cd $target_dir
  fi
}

dw() {
  local dirs=$HOME/dotfiles/.dirs
  arg=$1
  if [ -z "$arg" ]; then
    return;
  elif [ "$arg" = '-l' ]; then
    cat $dirs
  else
    echo "$arg\t`pwd`" >> $dirs
  fi
}

ga() {
  local selected
  selected=$(\git status -s | fzf -m --ansi --preview="echo {} | awk '{print \$2}' | xargs \git diff" | awk '{print $2}')
  if [[ -n "$selected" ]]; then
    git add `paste -s - <<< $selected`
  fi
  git status
}

# backspace,deleteキーを使えるように
stty erase '^H'
stty erase '^?'
##ctrl+sのロック, Ctrl+qのロック解除を無効にする
setopt no_flow_control

# 補完後、メニュー選択モードになり左右キーで移動が出来る
zstyle ':completion:*:default' menu select=2

# 補完で大文字にもマッチ
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Ctrl+rでヒストリーのインクリメンタルサーチ、Ctrl+sで逆順
# bindkey '^r' history-incremental-pattern-search-backward
# bindkey '^s' history-incremental-pattern-search-forward

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
setopt hist_ignore_all_dups  # 重複するコマンドラインは古い方を削除する
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt inc_append_history    # 実行するたびにファイルに書き込む
setopt hist_no_store         # historyコマンドは登録しない
setopt hist_reduce_blanks    # 余分な空白は詰めて記録する
[ -f $HOME/dotfiles/zsh/fzf.zsh ] && source $HOME/dotfiles/zsh/fzf.zsh

# コマンドを途中まで入力後、historyから絞り込み
# 例 ls まで打ってCtrl+pでlsコマンドをさかのぼる、Ctrl+bで逆順
autoload -Uz history-search-end

# zsh-autosuggestions 灰色の補完
[ -f $HOME/dotfiles/zsh/zsh-autosuggestions.zsh ] && source $HOME/dotfiles/zsh/zsh-autosuggestions.zsh
bindkey '^l' autosuggest-accept
bindkey '^]' autosuggest-execute

# cdrコマンドを有効 ログアウトしても有効なディレクトリ履歴
# cdr タブでリストを表示
autoload -Uz add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs
# cdrコマンドで履歴にないディレクトリにも移動可能に
zstyle ":chpwd:*" recent-dirs-default true

# 複数ファイルのmv 例 zmv *.txt *.txt.bk
autoload -Uz zmv
alias zmv='noglob zmv -W'
export PERL5LIB=$HOME/work/Moove/lib:$HOME/work/moove/lib:$PERL5LIB
export PATH="$HOME/dotfiles/bin:$PATH"
export PATH="$HOME/dotfiles/neovim/install/nvim/bin:$PATH"
# test
# [ -d ../node/.nodenv ] && export PATH="$HOME/dotfiles/zsh/nodenv/bin:$PATH"
# [ -d ../node/.nodenv ] && eval "$(nodenv init -)"
# [ -f ../node/node_modules/zx/zx.mjs ] && export PATH="
export PATH="/usr/bin:/usr/local:/usr/local/bin:$PATH"
export PATH="/usr/lib:$PATH"
#autoload -Uz vcs_info
#setopt prompt_subst
#zstyle ':vcs_info:git:*' check-for-changes true
#zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
#zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
#zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
#zstyle ':vcs_info:*' actionformats '[%b|%a]'
#precmd () { vcs_info }

autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{cyan}[%m]%f%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a] %m'
zstyle ':vcs_info:git+set-message:*' hooks git-config-user
precmd () { vcs_info }
GIT='${vcs_info_msg_0_}'

export PATH="$HOME/dotfiles/neovim/install/nvim/bin:$PATH"

[ -f ~/.zshrc.local ] && source ~/.zshrc.local

#black red green yellow blue magenta cyan white
PROMPT="%(?.%{${fg[green]}%}.%{${fg[red]}%})(%D %*%)%n${reset_color}@${hostcolor}${host}${reset_color}${fg[green]}(%j)${reset_color}${GIT}%~
%# "

. $HOME/.asdf/asdf.sh

# gitリポジトリにいる場合、set-messageフックでgit-config-user関数が呼び出されるように登録

# "+vi-<フック名>"関数で、hook_com[misc]にgit config user.emailの結果を代入する
function +vi-git-config-user(){
  hook_com[misc]+=`readlink  ~/.gitconfig | cut -f 2 -d '.'`
}

## tmux ログイン時起動
#[[ $- != *i* ]] && return
#[[ -z "$TMUX" ]] && exec tmux

