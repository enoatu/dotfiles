# beep音消す
setopt no_beep

setopt COMPLETE_IN_WORD

setopt IGNOREEOF
export EDITOR=nvim

# 日本語を使用
export LANG=ja_JP.UTF-8

# パスを追加したい場合
export PATH="$HOME/bin:$PATH"

# 環境によっては$SHELLがない時があるので設定
export SHELL=`which zsh`

# 色を使用
autoload -Uz colors
colors

# 補完
autoload -Uz compinit
compinit

# emacsキーバインド
bindkey -e

# ヒストリの設定
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt hist_ignore_all_dups  # 重複するコマンド行は古い方を削除
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt share_history         # コマンド履歴ファイルを共有する
setopt append_history        # 履歴を追加 (毎回 .zsh_history を作るのではなく)
setopt inc_append_history    # 履歴をインクリメンタルに追加
setopt hist_reduce_blanks    # 余分な空白は詰めて記録

# 自動でpushdを実行
setopt auto_pushd

# pushdから重複を削除
setopt pushd_ignore_dups

# コマンドミスを修正
setopt correct

# エイリアス
alias sudo='sudo ' # sudo ll など、sudo してもaliasを引き継げる
alias vi='vim'

# alias l='ls -ltr'
# alias ll='ls -l'

alias ei="eza --icons --git"
alias ea="eza -a --icons --git"
alias ee="eza -aahl --icons --git"
alias et="eza -T -L 3 -a -I 'node_modules|.git|.cache' --icons"
alias eta="eza -T -a -I 'node_modules|.git|.cache' --color=always --icons | less -r"
alias ls=ei
alias la=ea
alias ll=ee
# alias tree=et
alias lta=eta
alias l="clear && ls"

alias gba='git branch --sort=-authordate'
alias gu='git push -u origin $(git branch --show-current)'
alias gp='git pull'
alias gf="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

#alias c='cdr'
# historyに日付を表示
alias h='fc -lt '%F %T' 1'
alias cp='cp -i'
alias rm='rm -i'
#alias ..='c ../'
alias p='pushd'
alias diff='diff -U1'
alias exsh='exec $SHELL -l'

alias de='~/dotfiles/bin/docker_exec.sh'

alias a='git add . && git status'
alias ga='g a'
alias r='git reset && git status'
alias c='git commit -m'
alias am='git commit --amend'
alias c='GIT_EDITOR="nvim -c \"CopilotCommit\"" git commit -v'
alias gs='git status'
alias gb='git branch'
alias gd='git diff'
alias gds='git diff --staged'
alias gco='git checkout'

alias docker-compose='/usr/local/bin/docker compose'
alias dc='/usr/local/bin/docker compose'
alias dcl='/usr/local/bin/docker compose logs -f --tail=3000'

alias t='terraform'
alias vim='nvim'
# tmux でvimの色おかしい時はこちらを使う
alias xtmux='TERM=xterm-256color tmux'
alias ta='tmux attach'

gitstashpopreset() {
  git checkout --ours . && git reset && git checkout .
}

alias v='(){vim $(gitdiffls $1)}'

# mise
eval "$(${HOME}/.local/bin/mise activate zsh)"

# backspace,deleteキーを使えるように
stty erase '^H'
stty erase '^?'
##ctrl+sのロック, Ctrl+qのロック解除を無効にする
setopt no_flow_control

# 補完後、メニュー選択モードになり左右キーで移動が出来る
zstyle ':completion:*:default' menu select=2

# 補完で大文字にもマッチ
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
setopt hist_ignore_all_dups  # 重複するコマンドラインは古い方を削除する
setopt hist_ignore_dups      # 直前と同じコマンドラインはヒストリに追加しない
setopt inc_append_history    # 実行するたびにファイルに書き込む
setopt hist_no_store         # historyコマンドは登録しない
setopt hist_reduce_blanks    # 余分な空白は詰めて記録する

### ZSHプラグイン
[ -f $HOME/dotfiles/zsh/installs/fzf.zsh ] && source $HOME/dotfiles/zsh/installs/fzf.zsh
[ -f $HOME/dotfiles/zsh/installs/fzf-tab/fzf-tab.plugin.zsh ] && source $HOME/dotfiles/zsh/installs/fzf-tab/fzf-tab.plugin.zsh
[ -f $HOME/dotfiles/zsh/installs/mise.zsh ] && source $HOME/dotfiles/zsh/installs/mise.zsh
# コマンドを途中まで入力後、historyから絞り込み
# 例 ls まで打ってCtrl+pでlsコマンドをさかのぼる、Ctrl+bで逆順
autoload -Uz history-search-end
# zsh-autosuggestions 灰色の補完
[ -f $HOME/dotfiles/zsh/installs/zsh-autosuggestions.zsh ] && source $HOME/dotfiles/zsh/installs/zsh-autosuggestions.zsh
bindkey '^l' autosuggest-accept
bindkey '^]' autosuggest-execute
### ZSHプラグイン

# cdrコマンドを有効 ログアウトしても有効なディレクトリ履歴
# cdr タブでリストを表示
autoload -Uz add-zsh-hook
autoload -Uz chpwd_recent_dirs cdr
add-zsh-hook chpwd chpwd_recent_dirs
# cdrコマンドで履歴にないディレクトリにも移動可能に
zstyle ":chpwd:*" recent-dirs-default true

# 複数ファイルのmv 例 zmv *.txt *.txt.bk
autoload -Uz zmv
alias zmv='noglob zmv -W'
export PERL5LIB=$HOME/work/Moove/lib:$HOME/work/moove/lib:$PERL5LIB
export PATH="$HOME/dotfiles/bin:$PATH"
export PATH="$HOME/dotfiles/installs:$PATH"
export PATH="$HOME/dotfiles/neovim/install/nvim/bin:$PATH"
# test
# [ -d ../node/.nodenv ] && export PATH="$HOME/dotfiles/zsh/nodenv/bin:$PATH"
# [ -d ../node/.nodenv ] && eval "$(nodenv init -)"
# [ -f ../node/node_modules/zx/zx.mjs ] && export PATH="
export PATH="/usr/local/bin:$PATH"

get_git_branch_description() {
  # git-branch-descriptions がない場合return
  GIT_BRANCH_DESCRIPTIONS_PATH=enotiru-my-box/git-branch-descriptions
  [ ! -f $GIT_BRANCH_DESCRIPTIONS_PATH ] && return
  # git-branch-descriptions にbranchname,descriptionの形式で保存されている
  local branchname=$(git rev-parse --abbrev-ref HEAD)
  local description=$(grep -E "^$branchname," $GIT_BRANCH_DESCRIPTIONS_PATH | cut -d ',' -f 2)
  [ -n "$description" ] && echo "($description)"
}

autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{cyan}[%m]%f%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a] %m'
zstyle ':vcs_info:git+set-message:*' hooks git-config-user git-stash-count
precmd () { vcs_info }
GIT='${vcs_info_msg_0_}$(get_git_branch_description)'

[ -f ~/.zshrc.local ] && source ~/.zshrc.local

#black red green yellow blue magenta cyan white
PROMPT="%(?.%{${fg[green]}%}.%{${fg[red]}%})(%D %*%)%n${reset_color}@${hostcolor}${host}${reset_color}${fg[green]}(%j)${reset_color}${GIT}%~
%# "

# gitリポジトリにいる場合、set-messageフックでgit-config-user関数が呼び出されるように登録
# "+vi-<フック名>"関数で、hook_com[misc]にgit config user.emailの結果を代入する
function +vi-git-config-user(){
  hook_com[misc]+=$(git config user.name)
}

function +vi-git-stash-count {
  local COUNT=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
  if [ "$COUNT" -gt 0 ]; then
    hook_com[misc]+=" st=$COUNT"
  fi
}

## tmux ログイン時起動
#[[ $- != *i* ]] && return
#[[ -z "$TMUX" ]] && exec tmux

# python rye
[ -s "$HOME/.rye/env" ] && source "$HOME/.rye/env"
export PYTHONPATH=$HOME/.rye/tools/pip/lib/python3.12/site-packages:$PYTHONPATH
export PATH="$HOME/.rye/tools/pip/bin:$PATH"

# bun completions
[ -s "~/.bun/_bun" ] && source "~/.bun/_bun"


#サブモジュールごとに実行する
s() {
  (
    CURRENT_DIR=$(pwd)
    function catch {
      # 失敗したらカレントディレクトリへ
      cd $CURRENT_DIR
    }
    trap catch ERR

    if [ -z "$1" ]; then
        echo "Missing Command" >&2
        return
    fi

    IFS=$'\n'
    TMP_DIR=$(mktemp -d)
    for DIR in $(git submodule foreach -q sh -c pwd); do
      (
        cd "$DIR"
        OUTPUT=$("$@" 2>&1)
        BASENAME=$(basename "$DIR")
        echo "$OUTPUT" > "$TMP_DIR/$BASENAME.log"
      ) &
    done
    wait

    for LOG in "$TMP_DIR"/*.log; do
      BASENAME=$(basename "$LOG" .log)
      echo "[[$BASENAME]]>>"
      cat "$LOG"
    done

    rm -rf "$TMP_DIR"
  )
}

sg() {
  COMMANDS=()
  for DIR in $(git submodule foreach -q sh -c pwd); do
    COMMANDS+=("cd $DIR && $@")
  done
  ~/dotfiles/bin/parallel_tmux_exec.sh $COMMANDS
}

# 選択したファイルを git stash する
gss() {
  # fzfでファイルを選択
  selected_files=$(git ls-files -m | fzf -m)

  # 選択されたファイルをステージング
  if [ -n "$selected_files" ]; then
    echo "$selected_files" | xargs git add
    # ステージングしたファイルをstash
    git stash push -m "Stashing selected files" -- $(echo "$selected_files")
    # ステージングされたファイルをリセットして元の状態に戻す
    echo "$selected_files" | xargs git reset
    # リセットされたファイルの変更を取り消す
    echo "$selected_files" | xargs git checkout --
  else
    echo "No files selected."
  fi
}

# 選択したファイルを git reset する
gr() {
  # `fzf` を使ってステージングファイルを選択
  files=$(git diff --name-only --cached | fzf -m)
  if [ -n "$files" ]; then
    echo "$files" | xargs git reset
  else
    echo "No files selected"
  fi
}

dr() {
  local dirs=$HOME/dotfiles/.dirs
  arg=$1
  if [ -z "$arg" ]; then
    # fzf でディレクトリを選択 プレビューは表示しない
    target_dir=$(tac $dirs | fzf --height 40% --reverse --border --preview-window=hidden | awk -F"\t" '{print $2}' | head -n1)
    [ -z $target_dir ] && return 1
    cd $target_dir
  elif [ "$arg" = '-l' ]; then
    cat $dirs
  else
    target_dir=$(tac $dirs | awk -F"\t" -v arg=$arg '$1 == arg {print $2}' | head -n1)
    [ -z $target_dir ] && return 1
    cd $target_dir
  fi
}

dw() {
  local dirs=$HOME/dotfiles/.dirs
  arg=$1
  if [ -z "$arg" ]; then
    return;
  elif [ "$arg" = '-l' ]; then
    cat $dirs
  else
    echo "$arg\t`pwd`" >> $dirs
  fi
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
